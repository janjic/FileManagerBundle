{% extends constant('Plugins\\EmpirePluginsBundle\\Routing\\RouteThemeListener::SESSION_BACKEND_THEME_NAME') ~ '/Twig/Layout/master.html.twig' %}

{% form_theme form 'bootstrap_3_layout.html.twig' %}
{% form_theme formRename 'bootstrap_3_layout.html.twig' %}
{% set locale = app.request.locale %}

{% block customStylesheets %}
    <link rel="stylesheet" href="{{ asset('bundles/artgrisfilemanager/libs/blueimp-file-upload/css/jquery.fileupload.css') }}">
    <link rel="stylesheet" href="{{ asset('bundles/artgrisfilemanager/css/manager.css') }}">
{% endblock %}

{% block content %}
    <div class="container-fluid ">
        <div class="row top-bar" id="top-bar">
            <a type="button" title="{{ 'button.tree'|trans }}"
               href="{{ path('file_manager', fileManager.queryParameters|merge({'tree': (fileManager.tree == true ? 0 : 1), '_locale': locale })) }}"
               class="btn btn-sm btn-default {{ fileManager.tree ? 'active' }}">
                <span class="fa fa-navicon"></span>
            </a>
            {% if fileManager.parent %}
                <a class="btn btn-default btn-sm"
                   title="{{ 'button.parent'|trans }}"
                   href="{{ fileManager.parent }}">
                    <span class="fa fa-level-up"></span></a>
            {% endif %}
            <button type="button" title="{{ 'button.refresh'|trans }}" class="btn btn-default btn-sm "
                    onClick="window.location.reload()">
                <i class="glyphicon glyphicon-refresh"></i>
            </button>

            <span class="btn btn-success btn-sm fileinput-button btn-action">
                <i class="glyphicon glyphicon-file"></i>
                <span>{{ 'button.add.files'|trans }}</span>
                <input id="fileupload" type="file"
                       data-url="{{ path('file_manager_upload', fileManager.queryParameters|merge({ '_locale': locale })) }}"
                       name="files[]" multiple=""
                       accept="{{ fileManager.configuration.accept is defined ? fileManager.configuration.accept : (fileManager.type ? accept(fileManager.type)) }}">
            </span>

            <span class="btn btn-success btn-sm fileinput-button btn-action">
                <i class="glyphicon glyphicon-file"></i>
                <span>{{ 'Add archive'|trans }}</span>
                <input id="archiveupload" type="file" accept=".zip">
            </span>

            <button type="button" class="btn btn-primary btn-sm btn-action" data-toggle="modal" data-target="#addFolder">
                <i class="glyphicon glyphicon-folder-open"></i>
                <span>{{ 'button.add.folder'|trans }}</span>
            </button>
            {% if fileManager.parent %}
                <button type="button"
                        class="btn btn-sm btn-danger js-delete-modal"
                        data-trigger="click"
                        data-container="body"
                        data-toggle="modal"
                        data-target="#js-confirm-delete"
                        data-placement="left"
                        data-html="true"
                        data-href='{{ path('file_manager_delete', fileManager.queryParameters|merge({'_locale': locale})) }}'>
                    <i class="glyphicon glyphicon-remove"></i>
                    <span>{{ 'button.delete.current'|trans }}</span>
                </button>
            {% endif %}
            <div class="btn-group pull-right">
                {% if fileManager.view != "list" %}
                    {{ order(fileManager, 'name') }}
                    {{ order(fileManager, 'date') }}
                    {{ order(fileManager, 'size') }}
                    {{ order(fileManager, 'dimension') }}
                {% endif %}
                <a type="button" href="{{ path('file_manager', fileManager.queryParameters|merge({'view':"list", '_locale': locale})) }}"
                   class="btn btn-sm btn-default {{ fileManager.view == 'list' ? 'active' }}">
                    <span class="fa fa-th-list"></span>
                </a>
                <a type="button" href="{{ path('file_manager', fileManager.queryParameters|merge({'view':'thumbnail', '_locale': locale})) }}"
                   class="btn btn-sm btn-default {{ fileManager.view == 'thumbnail' ? 'active' }}">
                    <span class="fa fa-th"></span>
                </a>
            </div>
        </div>
        <div class="row">
            {% if fileManager.tree %}
            <div class="col-xs-12  col-sm-4 col-md-3 col-lg-2">
                <div class="table-responsive">
                    <div id="tree"></div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-10 no-tree-blk">
                {% else %}
                <div class="col-lg-12">
                    {% endif %}
                    <form id="form-multiple-delete">
                        {% include '@ArtgrisFileManager/views/_manager_view.html.twig' with {'fileManager' :fileManager,  'fileArray' : fileArray, 'formDelete' : formDelete} only %}
                    </form>
                </div>
            </div>
        </div>
        {% include '@ArtgrisFileManager/views/_modals.html.twig' %}
    </div>
{% endblock %}
{% block customScripts %}
    <script src="{{ asset('bundles/artgrisfilemanager/libs/blueimp-file-upload/js/vendor/jquery.ui.widget.js') }}"></script>
    <script src="{{ asset('bundles/artgrisfilemanager/libs/blueimp-file-upload/js/jquery.iframe-transport.js') }}"></script>
    <script src="{{ asset('bundles/artgrisfilemanager/libs/blueimp-file-upload/js/jquery.fileupload.js') }}"></script>
    <script src="{{ asset('bundles/artgrisfilemanager/libs/sticky-kit/jquery.sticky-kit.min.js') }}"></script>
    <script src="{{ asset('bundles/artgrisfilemanager/libs/remarkable-bootstrap-notify/dist/bootstrap-notify.min.js') }}"></script>

    <script>
        var treedata = {{ treeData|raw }};
        var tree = {{ fileManager.tree ? 'true' : 'false' }}
        var moduleName = '{{ fileManager.module ? fileManager.module : 0 }}';
        var successMessage = '{{ 'file.add.success'|trans }}';
        var url = "{{ path('file_manager', fileManager.queryParameters|merge({'json':true, '_locale': locale}))|e('js') }}"
        var urldelete = "{{ path('file_manager_delete', fileManager.queryParameters|merge({'_locale': locale}) )|e('js') }}"
        var deleteMessage = "{{ 'title.delete'|trans }}"
        var renameMessage = "{{ 'title.rename.file'|trans }}"
        var downloadMessage = "{{ 'title.download'|trans }}"
    </script>

    <script>
        // display alert
        function displayAlert(type, msg, progressBar) {
            let pBar = progressBar !== undefined && progressBar;
            return $.notify({
                message: msg
            }, {
                showProgressbar: pBar,
                delay: pBar ? 0 : 5000,
                type: type,
                placement: {
                    from: "bottom",
                    align: "left"
                },
                template: '<div data-notify="container" class="col-xs-5 col-md-4 col-lg-3 alert alert-{0}" role="alert">' +
                '<button type="button" aria-hidden="true" class="close" data-notify="dismiss">Ã—</button>' +
                '<span data-notify="icon"></span> ' +
                '<span data-notify="title">{1}</span> ' +
                '<span data-notify="message">{2}</span>' +
                '<div class="progress" data-notify="progressbar">' +
                '<div class="progress-bar progress-bar-{0}" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>' +
                '</div>' +
                '<a href="{3}" target="{4}" data-notify="url"></a>' +
                '</div>'
            });
        }

        // display session flash messages
        {% for type, messages in app.flashes %}
        {% for message in messages %}
        displayAlert('{{ type }}', '{{ message|trans|e('js') }}')
        {% endfor %}
        {% endfor %}


        var $connectModal           = $('#findEntityModal');
        var $connectModalButton     = $('.findEntityModalButton');
        var $entitySelect           = $('#entity');
        var $entityField            = $('#entity-field');
        var $entitySearchValue      = $('#search-value');
        var locationPath            = getQueryParameterByName('route');
        var classes, selectedClass,
            selectedImage           = null;

        $connectModalButton.on('click', function (event) {
            event.preventDefault();
            selectedImage = $(this).data('name');
            function callbackFunction(ctx, data) {
                classes = data;
                for (const [key, value] of Object.entries(classes)) {
                    $entitySelect.append(new Option(value.name, key));
                }
                initializeEntitySelect();

                $connectModal.modal();
            }

            /** Don't send request for loading classes if they are already loaded */
            if (classes) {
                initializeEntitySelect();
                $connectModal.modal();

                return;
            }

            adapter.getData(Routing.generate('file_manager_load_classes_json', {_locale: getURLParameter('locale')}, true), callbackFunction, "");
        });

        $connectModal.on('hidden.bs.modal', function () {
            selectedClass = selectedImage = null;
            if ($entitySelect.data('select2')) {
                $entitySelect.unbind('select2:select');
                $entitySelect.select2('destroy');
            }
            if ($entityField.data('select2')) {
                $entityField.empty();
                $entityField.unbind('select2:select');
                $entityField.select2('destroy');
            }
            if ($entitySearchValue.data('select2')) {
                $entitySearchValue.empty();
                $entitySearchValue.unbind('select2:select');
                $entitySearchValue.select2('destroy');
            }
            hideSelects();
        });

        function hideSelects() {
            $entityField.closest('.form-group').hide();
            $entitySearchValue.closest('.form-group').hide();
        }

        function initializeEntitySelect() {
            $entitySelect.val([]);
            $entitySelect.select2({
                dropdownParent: $("#findEntityModal"),
                placeholder: Translator.trans('Select entity')
            }).on('select2:select', function(element) {
                let selected = element.params.data.id;
                for (const [key, value] of Object.entries(classes)) {
                    if (selected === key) {
                        selectedClass = value;
                        if ($entityField.data('select2')) {
                            $entityField.select2('destroy');
                        }
                        $entityField.empty();

                        value.mappedFields.forEach(function (el) {
                            $entityField.append(new Option(el, el));
                        });

                        $entityField.val([]);
                        $entityField.select2({
                            dropdownParent: $("#findEntityModal"),
                            placeholder: Translator.trans('Select field')
                        }).on('select2:select', function () {
                            initSearch();
                            $entitySearchValue.closest('.form-group').show();
                        });
                        $entityField.closest('.form-group').show();

                        return true;
                    }
                }
            });
        }


        function initSearch() {
            $entitySearchValue.select2({
                dropdownParent: $("#findEntityModal"),
                placeholder: Translator.trans('Search main entity'),
                minimumInputLength: 1,
                dataType: 'json',
                ajax: {
                    url: Routing.generate('file_manager_entity_search', {_locale: getURLParameter('locale') }, true),
                    delay: 250,
                    method: "POST",
                    data: function (params) {
                        return JSON.stringify({
                            entity: selectedClass.path,
                            fields: selectedClass.searchFields,
                            view: selectedClass.viewField,
                            query: params.term,
                            page: params.page,
                            offset: 10
                        });
                    },
                    processResults: function (data, params) {
                        params.page = params.page || 1;

                        return {
                            results: data.results,
                            pagination: {
                                more: true
                            }
                        };
                    }
                },
                escapeMarkup: function (markup) {
                    return markup;
                },
                templateResult: function (item) {
                    if (item.loading) return Translator.trans('Loading') + '...';

                    item.text = item.title;

                    return '<div class="select2-result clearfix" data-id="' + item.id + '" data-title="' + item.id + '">' + item.title + '</div>';
                }
            }).on('select2:select', function(e) {
                let element = e.params.data;
                let obj = {
                    entity: selectedClass.path,
                    entityId: element.id,
                    field: $entityField.val(),
                    fileName: selectedImage,
                    filePath: locationPath
                };
                function successFunction(ctx, data) {
                    if (data.status === 200) {
                        toastr.success(Translator.trans(data.message));
                    } else {
                        toastr.error(Translator.trans(data.message));
                    }
                    $connectModal.modal('hide');
                }

                adapter.sendData(Routing.generate('file_manager_assign_file_json', {_locale: getURLParameter('locale')}, true), obj, "POST", successFunction, $(this));
            });
        }

        $(document).ready(function () {


            (function( $ ) {
                let uploadArchiveEl = document.getElementById('archiveupload');
                uploadArchiveEl.addEventListener('change', start_upload, false);
                let reader = {};
                let file = {};
                let slice_size = 1000 * 1000 * 1024; // 10 MB
                let fileUploadProgressBar;
                var chunk, chunks = 1;


                function start_upload( event ) {
                    event.preventDefault();
                    chunk = chunks = 1;

                    reader = new FileReader();
                    if (file = uploadArchiveEl.files[0]) {
                        upload_file( 0 );
                    } else {
                        toastr.error(Translator.trans('Error while preparing for upload. Please try again.'))
                    }
                }

                function upload_file( start ) {
                    let next_slice = start + slice_size + 1;
                    let blob = file.slice( start, next_slice );

                    reader.onloadend = function( event ) {
                        if ( event.target.readyState !== FileReader.DONE ) {
                            return;
                        }
                        chunks = Math.ceil( file.size / slice_size );
                        // At this point the file data is loaded to event.target.result
                        sendData(event.target.result, start, next_slice);
                    };

                    reader.readAsDataURL( blob );
                }

                function sendData(data, start, next_slice) {
                    if (0 === start) {
                        fileUploadProgressBar = displayAlert('success', file.name, true);
                    }
                    $.ajax( {
                        url: '{{ path('file_manager_upload_archive', fileManager.queryParameters|merge({ '_locale': locale })) }}',
                        type: 'POST',
                        dataType: 'json',
                        cache: false,
                        data: {
                            chunk: chunk,
                            chunks: chunks,
                            file_data: data,
                            file: file.name,
                            file_type: file.type
                        },
                        success: function( data ) {
                            if (data.status === 200) {
                                chunk++;
                                var size_done = start + slice_size;
                                var percent_done = Math.floor( ( size_done / file.size ) * 100 );
                                if ( next_slice < file.size ) {
                                    // Update upload progress
                                    fileUploadProgressBar.update('progress', percent_done);

                                    // More to upload, call function recursively
                                    upload_file( next_slice );
                                } else {
                                    // Update upload progress
                                    fileUploadProgressBar.update('progress', 100);
                                    fileUploadProgressBar.close();
                                    chunk = chunks = 1;
                                }
                            } else {
                                chunk = chunks = 1;
                                toastr.error(Translator.trans(data.message));
                                fileUploadProgressBar.close();
                            }
                        }
                    } );
                }

            })( jQuery );
        });

    </script>
    <script src="{{ asset('bundles/artgrisfilemanager/js/manager.js') }}"></script>
{% endblock %}

